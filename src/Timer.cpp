#include "Timer.h"

/*******************************************************************************
*
*******************************************************************************/
Timer::Timer()
: started(false), paused(false), startTime(0), pauseTime(0) {

}

/*******************************************************************************
*
*******************************************************************************/
Timer::~Timer() {

}

/*******************************************************************************
*
*******************************************************************************/
clock_t Timer::getTicks() {
  if (!started) {
    return 0;
  }

  if (paused) {
    return pauseTime - startTime;
  }

  return clock() - startTime;
}

/*******************************************************************************
*
*******************************************************************************/
bool Timer::isPaused() {
  return paused;
}

/*******************************************************************************
*
*******************************************************************************/
bool Timer::isStarted() {
  return started;
}

/*******************************************************************************
*
*******************************************************************************/
bool Timer::isStopped() {
  return !started;
}

/*******************************************************************************
*
*******************************************************************************/
void Timer::pause() {
  if (paused || !started) {
    return;
  }

  paused    = true;
  pauseTime = clock();
}

/*******************************************************************************
*
*******************************************************************************/
void Timer::reset() {
  paused    = false;
  startTime = clock();
}

/*******************************************************************************
*
*******************************************************************************/
void Timer::resume() {
  if (!paused) {
    return;
  }

  paused     = false;
  startTime += clock() - pauseTime;
}

/*******************************************************************************
*
*******************************************************************************/
void Timer::start() {
  if (started) {
    return;
  }

  started   = true;
  paused    = false;
  startTime = clock();
}

/*******************************************************************************
*
*******************************************************************************/
void Timer::stop() {
  started = false;
}
